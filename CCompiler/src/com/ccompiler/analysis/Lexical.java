/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package com.ccompiler.analysis;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>C.flex</tt>
 */
public class Lexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\31\1\67\1\70\1\30\22\0\1\26\1\103\1\72"+
    "\2\0\1\77\1\100\1\66\1\114\1\115\1\33\1\76\1\111\1\10"+
    "\1\71\1\32\1\1\7\3\1\20\1\2\1\107\1\105\1\75\1\74"+
    "\1\73\1\22\1\0\1\56\1\57\1\60\1\5\1\7\1\13\1\61"+
    "\1\4\1\62\2\4\1\15\1\4\1\63\1\4\1\11\2\4\1\64"+
    "\1\65\1\17\2\4\1\6\2\4\1\106\1\21\1\110\1\101\1\55"+
    "\1\0\1\34\1\24\1\42\1\46\1\40\1\12\1\50\1\44\1\45"+
    "\1\4\1\41\1\14\1\47\1\23\1\36\1\54\1\4\1\37\1\43"+
    "\1\35\1\16\1\27\1\52\1\25\1\53\1\51\1\113\1\102\1\112"+
    "\1\104\6\0\1\67\u1fa2\0\1\67\1\67\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\3\1\5\1\3"+
    "\1\6\1\3\1\6\1\7\1\10\13\3\1\1\1\11"+
    "\1\12\1\1\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\2\3\0\1\2"+
    "\1\36\1\37\1\6\1\40\1\41\3\3\2\0\3\3"+
    "\1\42\2\3\1\6\1\0\1\43\1\44\15\3\1\45"+
    "\1\3\1\46\14\3\3\0\1\47\2\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\2\1\0\1\36"+
    "\1\0\1\36\1\3\1\67\1\3\1\0\5\3\2\0"+
    "\22\3\1\70\16\3\1\47\1\0\1\47\1\2\1\71"+
    "\3\0\1\72\1\73\1\0\1\3\1\74\4\3\1\75"+
    "\1\0\1\76\4\3\1\77\1\100\1\3\1\101\2\3"+
    "\1\102\11\3\1\103\13\3\1\104\1\3\1\105\1\106"+
    "\7\3\1\107\2\3\1\110\6\3\1\111\3\3\1\112"+
    "\11\3\1\113\2\3\1\114\1\3\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\14\3\1\124\3\3\1\125"+
    "\3\3\1\126\6\3\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\5\3\1\141\2\3"+
    "\1\142\7\3\1\143\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\116\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444"+
    "\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4"+
    "\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\116\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46"+
    "\0\u0b94\0\116\0\116\0\116\0\u0be2\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68"+
    "\0\u0db6\0\116\0\116\0\116\0\116\0\u0e04\0\u0e52\0\u0ea0"+
    "\0\u0eee\0\u08d6\0\u0f3c\0\u0f8a\0\u0fd8\0\u035a\0\u1026\0\u1074"+
    "\0\u10c2\0\u1110\0\116\0\116\0\u115e\0\u11ac\0\u11fa\0\u1248"+
    "\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8"+
    "\0\u1506\0\u0138\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da"+
    "\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a"+
    "\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba"+
    "\0\116\0\116\0\116\0\u1c08\0\116\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\116\0\116\0\u1c56\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\116\0\u1d8e\0\u0138\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6"+
    "\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136"+
    "\0\u2184\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6"+
    "\0\u23f4\0\u2442\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u0138"+
    "\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838"+
    "\0\u2886\0\u28d4\0\u2922\0\u2970\0\u29be\0\u2a0c\0\116\0\u2a5a"+
    "\0\u1a34\0\116\0\116\0\u2aa8\0\u2af6\0\u2b44\0\116\0\116"+
    "\0\u2b92\0\u2be0\0\u0138\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\u0138"+
    "\0\u2d66\0\u0138\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u0138\0\u0138"+
    "\0\u2eec\0\u0138\0\u2f3a\0\u2f88\0\u0138\0\u2fd6\0\u3024\0\u3072"+
    "\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u0138\0\u3294"+
    "\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504"+
    "\0\u3552\0\u35a0\0\u0138\0\u35ee\0\u0138\0\u0138\0\u363c\0\u368a"+
    "\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u0138\0\u385e\0\u38ac"+
    "\0\u0138\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u0138"+
    "\0\u3ace\0\u3b1c\0\u3b6a\0\u0138\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2"+
    "\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u0138\0\u3e76\0\u3ec4"+
    "\0\u0138\0\u3f12\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134"+
    "\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba\0\u0138\0\u4308\0\u4356"+
    "\0\u43a4\0\u0138\0\u43f2\0\u4440\0\u448e\0\u0138\0\u44dc\0\u452a"+
    "\0\u4578\0\u45c6\0\u4614\0\u4662\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u46b0\0\u46fe"+
    "\0\u474c\0\u479a\0\u47e8\0\u0138\0\u4836\0\u4884\0\u0138\0\u48d2"+
    "\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6\0\u0138\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\4\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\11\1\4\1\2\1\13\1\5"+
    "\1\14\1\5\1\15\1\16\1\17\1\15\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\1\5\1\26\1\27"+
    "\1\5\1\30\1\31\1\5\1\32\1\5\1\33\2\5"+
    "\1\34\10\5\1\35\1\36\1\15\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\117\0\1\64\1\65\1\64\2\0\1\66"+
    "\1\67\4\0\4\70\1\65\4\0\1\66\12\0\1\67"+
    "\30\0\1\71\25\0\3\4\3\0\1\67\4\0\4\70"+
    "\1\4\17\0\1\67\30\0\1\71\25\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\32\5\40\0"+
    "\1\72\15\0\2\73\1\0\1\73\36\0\1\73\2\0"+
    "\1\74\1\75\22\0\7\5\1\0\3\5\1\76\4\5"+
    "\2\0\3\5\1\0\1\5\4\0\2\5\1\77\27\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\2\5\1\100\27\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\32\5\1\101\3\0"+
    "\1\102\24\0\7\5\1\0\7\5\1\103\2\0\1\104"+
    "\2\5\1\0\1\5\4\0\32\5\1\101\3\0\1\102"+
    "\24\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\3\5\1\105\26\5\56\0\2\106\1\0\1\106"+
    "\36\0\1\106\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\106\1\107\1\0\1\106\2\0\2\5\1\110\27\5"+
    "\2\0\1\106\56\0\1\73\116\0\1\111\1\112\40\0"+
    "\1\113\115\0\1\114\22\0\7\5\1\0\5\5\1\115"+
    "\2\5\2\0\3\5\1\0\1\5\4\0\32\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\17\5\1\116\12\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\117\25\5\31\0"+
    "\7\5\1\0\3\5\1\120\4\5\2\0\1\121\1\5"+
    "\1\122\1\0\1\5\4\0\32\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\1\123\1\5"+
    "\1\124\5\5\1\125\21\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\126\6\5"+
    "\1\127\1\130\4\5\1\131\13\5\31\0\7\5\1\0"+
    "\1\5\1\132\6\5\2\0\1\133\2\5\1\0\1\5"+
    "\4\0\32\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\2\5\1\134\1\5\1\135\25\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\2\5\1\136\27\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\10\5\1\137\21\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\21\5\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\30\0\21\151\1\152\6\151\1\153"+
    "\1\0\34\151\1\154\2\153\25\151\1\0\3\71\14\0"+
    "\1\71\50\0\1\155\24\0\21\102\1\156\7\102\1\0"+
    "\40\102\1\157\23\102\73\0\1\160\1\161\115\0\1\162"+
    "\115\0\1\163\1\164\1\0\1\61\7\0\1\54\102\0"+
    "\1\165\1\0\1\166\112\0\1\60\1\167\115\0\1\170"+
    "\3\0\1\171\111\0\1\172\115\0\1\173\5\0\1\174"+
    "\107\0\1\175\114\0\1\56\23\0\1\64\1\65\1\64"+
    "\3\0\1\67\4\0\4\70\1\65\17\0\1\67\30\0"+
    "\1\71\25\0\3\65\3\0\1\67\10\0\1\65\17\0"+
    "\1\67\30\0\1\71\25\0\3\176\1\0\1\176\1\0"+
    "\1\176\2\0\2\176\4\0\1\176\3\0\1\176\7\0"+
    "\1\176\3\0\1\176\1\0\1\176\3\0\1\176\7\0"+
    "\3\176\10\0\1\177\25\0\3\200\4\0\1\201\7\0"+
    "\1\200\55\0\1\201\33\0\4\70\77\0\3\71\3\0"+
    "\1\67\2\0\4\202\2\0\1\71\17\0\1\67\56\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\203\27\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\3\5\1\204\26\5\31\0"+
    "\7\5\1\0\10\5\2\0\1\205\2\5\1\0\1\5"+
    "\4\0\32\5\30\0\21\153\1\206\7\153\1\0\34\153"+
    "\1\0\27\153\1\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\32\5\4\0\1\102\24\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\7\5"+
    "\1\207\1\5\1\210\20\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\4\5\1\211\25\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\106\1\107"+
    "\1\0\1\106\2\0\32\5\2\0\1\106\26\0\7\5"+
    "\1\0\3\5\1\212\4\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\213\20\5\30\0\30\111\1\17\1\73"+
    "\64\111\33\214\1\215\62\214\1\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\216\30\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\20\5\1\217\11\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\220\5\5"+
    "\1\221\4\5\1\222\15\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\7\5\1\223\22\5"+
    "\31\0\7\5\1\0\5\5\1\224\2\5\2\0\3\5"+
    "\1\0\1\5\4\0\32\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\225\30\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\7\5\1\226\22\5\31\0\7\5\1\0\10\5"+
    "\2\0\1\227\2\5\1\0\1\5\4\0\32\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\230\31\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\231\2\5\1\232\26\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\233\27\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\14\5\1\234\1\235\14\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\236\20\5\31\0\7\5\1\0\3\5"+
    "\1\237\4\5\2\0\3\5\1\0\1\5\4\0\1\5"+
    "\1\240\30\5\31\0\7\5\1\0\5\5\1\241\2\5"+
    "\2\0\3\5\1\0\1\5\4\0\32\5\31\0\7\5"+
    "\1\0\1\5\1\242\6\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\5\1\243\30\5\31\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\11\5"+
    "\1\244\20\5\31\0\7\5\1\0\1\5\1\245\6\5"+
    "\2\0\3\5\1\0\1\5\4\0\32\5\31\0\7\5"+
    "\1\0\3\5\1\246\4\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\5\1\247\30\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\2\5\1\250\27\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\2\5\1\251\27\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\4\5\1\252\25\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\13\5\1\253\16\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\2\5\1\254\27\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\5\1\255\30\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\10\5\1\256\21\5"+
    "\30\0\21\153\1\206\7\153\1\0\34\153\1\257\27\153"+
    "\1\0\1\153\1\0\1\153\6\0\1\153\6\0\2\153"+
    "\1\151\1\153\1\260\1\0\1\153\4\0\1\153\1\151"+
    "\1\0\1\151\26\0\1\261\3\0\1\153\23\0\21\153"+
    "\1\206\7\153\1\0\34\153\1\262\27\153\66\0\1\257"+
    "\120\0\1\263\25\0\1\102\1\0\1\102\6\0\1\102"+
    "\6\0\4\102\1\264\1\0\1\102\4\0\2\102\1\0"+
    "\1\102\26\0\1\102\3\0\1\102\40\0\1\265\1\266"+
    "\1\265\6\0\2\157\1\0\1\157\36\0\1\157\1\0"+
    "\1\102\117\0\1\267\115\0\1\270\22\0\3\176\1\0"+
    "\1\176\1\0\1\176\1\0\1\67\2\176\4\70\1\176"+
    "\3\0\1\176\7\0\1\176\3\0\1\176\1\0\1\176"+
    "\3\0\1\176\5\0\1\67\1\0\3\176\10\0\1\271"+
    "\25\0\3\271\1\0\1\271\1\0\1\271\2\0\2\271"+
    "\4\0\1\271\3\0\1\271\7\0\1\271\3\0\1\271"+
    "\1\0\1\271\3\0\1\271\7\0\3\271\36\0\3\200"+
    "\6\0\4\202\2\0\1\200\76\0\3\200\14\0\1\200"+
    "\76\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\272\31\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\14\5\1\273\15\5\31\0"+
    "\1\153\1\0\1\153\6\0\1\153\6\0\4\153\1\260"+
    "\1\0\1\153\4\0\2\153\1\0\1\153\26\0\1\153"+
    "\3\0\1\153\24\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\11\5\1\274\20\5\31\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\2\5"+
    "\1\275\27\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\276\31\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\1\277\31\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\12\5\1\300\17\5\30\0\33\214\1\301\62\214"+
    "\32\0\1\73\1\215\63\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\2\5\1\302\27\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\303\25\5\31\0\7\5\1\0\5\5\1\304"+
    "\2\5\2\0\3\5\1\0\1\5\4\0\32\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\305\30\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\11\5\1\306\20\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\307\25\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\13\5\1\310\16\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\311\25\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\312\25\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\313\5\5\1\314\22\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\3\5\1\315"+
    "\26\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\1\5\1\316\30\5\31\0\7\5\1\0"+
    "\5\5\1\317\2\5\2\0\3\5\1\0\1\5\4\0"+
    "\32\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\3\5\1\320\26\5\31\0\7\5\1\0"+
    "\10\5\2\0\1\321\2\5\1\0\1\5\4\0\32\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\4\5\1\322\25\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\323\30\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\324\20\5\31\0\7\5\1\0\10\5"+
    "\2\0\1\5\1\325\1\5\1\0\1\5\4\0\32\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\326\31\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\2\5\1\327\27\5\31\0"+
    "\7\5\1\0\3\5\1\330\4\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\31\0\7\5\1\0\5\5\1\331"+
    "\2\5\2\0\3\5\1\0\1\5\4\0\32\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\11\5\1\332\20\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\2\5\1\333\27\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\334\27\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\13\5\1\335\16\5\31\0"+
    "\7\5\1\0\10\5\2\0\1\336\2\5\1\0\1\5"+
    "\4\0\32\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\337\31\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\3\5\1\340"+
    "\26\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\1\341\31\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\3\5\1\342\26\5"+
    "\31\0\3\153\1\0\1\153\1\0\1\153\2\0\2\153"+
    "\4\0\1\153\3\0\1\153\7\0\1\153\3\0\1\153"+
    "\1\0\1\153\3\0\1\153\7\0\3\153\36\0\3\102"+
    "\1\0\1\102\1\0\1\102\2\0\2\102\4\0\1\102"+
    "\3\0\1\102\7\0\1\102\3\0\1\102\1\0\1\102"+
    "\3\0\1\102\7\0\3\102\127\0\1\102\43\0\1\265"+
    "\51\0\1\102\24\0\3\271\1\0\1\271\1\0\1\271"+
    "\1\0\1\67\2\271\4\0\1\271\3\0\1\271\7\0"+
    "\1\271\3\0\1\271\1\0\1\271\3\0\1\271\5\0"+
    "\1\67\1\0\3\271\36\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\343\30\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\14\5\1\344\15\5\31\0\7\5\1\0\10\5\2\0"+
    "\1\345\2\5\1\0\1\5\4\0\32\5\31\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\5\5"+
    "\1\346\24\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\5\1\347\30\5\30\0\32\214"+
    "\1\73\1\301\62\214\1\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\12\5\1\350\17\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\3\5\1\351\26\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\3\5\1\352\26\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\7\5\1\353\22\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\3\5\1\354\26\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\11\5\1\355\20\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\356\30\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\11\5\1\357\20\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\6\5\1\360\23\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\361\30\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\362\25\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\363\27\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\6\5\1\364\23\5\31\0"+
    "\7\5\1\0\10\5\2\0\1\365\2\5\1\0\1\5"+
    "\4\0\32\5\31\0\7\5\1\0\3\5\1\366\4\5"+
    "\2\0\3\5\1\0\1\5\4\0\32\5\31\0\7\5"+
    "\1\0\5\5\1\367\2\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\4\5\1\370\25\5\31\0\7\5"+
    "\1\0\10\5\2\0\1\371\2\5\1\0\1\5\4\0"+
    "\32\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\14\5\1\372\15\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\13\5\1\373"+
    "\16\5\31\0\7\5\1\0\3\5\1\374\4\5\2\0"+
    "\3\5\1\0\1\5\4\0\32\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\20\5\1\375"+
    "\11\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\376\25\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\14\5\1\377"+
    "\15\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\u0100\25\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\1\5\1\u0101"+
    "\30\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\u0102\25\5\31\0\7\5\1\0"+
    "\10\5\2\0\1\u0103\2\5\1\0\1\5\4\0\32\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\u0104\20\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\4\5\1\u0105\25\5"+
    "\31\0\7\5\1\0\10\5\2\0\1\u0106\2\5\1\0"+
    "\1\5\4\0\32\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\11\5\1\u0107\20\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\u0108\30\5\31\0\7\5\1\0\10\5\2\0"+
    "\1\u0109\2\5\1\0\1\5\4\0\32\5\31\0\7\5"+
    "\1\0\10\5\2\0\1\u010a\2\5\1\0\1\5\4\0"+
    "\32\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\6\5\1\u010b\23\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\1\5\1\u010c"+
    "\30\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\12\5\1\u010d\17\5\31\0\7\5\1\0"+
    "\1\5\1\u010e\6\5\2\0\3\5\1\0\1\5\4\0"+
    "\32\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\10\5\1\u010f\21\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\4\5\1\u0110"+
    "\25\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\u0111\25\5\31\0\7\5\1\0"+
    "\3\5\1\u0112\4\5\2\0\3\5\1\0\1\5\4\0"+
    "\32\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\6\5\1\u0113\23\5\31\0\7\5\1\0"+
    "\10\5\2\0\1\u0114\2\5\1\0\1\5\4\0\32\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\u0115\20\5\31\0\7\5\1\0\3\5"+
    "\1\u0116\4\5\2\0\3\5\1\0\1\5\4\0\32\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\3\5\1\u0117\26\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\11\5\1\u0118\20\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\5\1\u0119\30\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\11\5\1\u011a\20\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\u011b\31\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u011c\25\5\31\0"+
    "\7\5\1\0\3\5\1\u011d\4\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\31\0\7\5\1\0\1\5\1\u011e"+
    "\6\5\2\0\3\5\1\0\1\5\4\0\32\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\6\5\1\u011f\23\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u0120\25\5\31\0"+
    "\7\5\1\0\5\5\1\u0121\2\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\u0122\30\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\21\5\1\u0123\10\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\u0124\1\5\1\u0125\27\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\6\5\1\u0126\23\5\31\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\4\5\1\u0127\25\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\u0128\20\5\31\0\7\5\1\0\10\5"+
    "\2\0\1\u0129\2\5\1\0\1\5\4\0\32\5\31\0"+
    "\7\5\1\0\5\5\1\u012a\2\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\6\5\1\u012b\23\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\12\5\1\u012c\17\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\12\5\1\u012d\17\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\u012e\25\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\u012f\30\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\3\5\1\u0130\26\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u0131\25\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\21\5\1\u0132\10\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\u0133\22\5\31\0"+
    "\7\5\1\0\1\5\1\u0134\6\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\31\0\7\5\1\0\10\5\2\0"+
    "\2\5\1\u0135\1\0\1\5\4\0\32\5\31\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\6\5"+
    "\1\u0136\23\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\u0137\31\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\3\5\1\u0138"+
    "\26\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\21\5\1\u0139\10\5\31\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\21\5\1\u013a"+
    "\10\5\31\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\3\5\1\u013b\26\5\31\0\7\5\1\0"+
    "\10\5\2\0\1\u013c\2\5\1\0\1\5\4\0\32\5"+
    "\31\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\u013d\31\5\31\0\7\5\1\0\3\5\1\u013e"+
    "\4\5\2\0\3\5\1\0\1\5\4\0\32\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\17\5\1\u013f\12\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\u0140\22\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\u0141\27\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\u0142\22\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\6\5\1\u0143\23\5\31\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u0144\25\5\31\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\u0145\31\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\3\5\1\u0146\26\5\31\0\7\5"+
    "\1\0\3\5\1\u0147\4\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\31\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\5\1\u0148\30\5\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19188];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\22\1\1\11\13\1\3\11"+
    "\1\1\6\11\1\1\3\0\2\1\4\11\3\1\2\0"+
    "\7\1\1\0\2\11\34\1\3\0\1\1\2\0\2\1"+
    "\3\11\1\1\11\11\1\1\1\0\1\1\1\0\1\11"+
    "\3\1\1\0\5\1\2\0\41\1\1\11\1\0\1\1"+
    "\2\11\3\0\2\11\1\0\7\1\1\0\207\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public static String curLine;

  /**
   * Factory method for creating Symbols for a given type.
   * @param type The type of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn);
  }
  
  /**
   * Factory method for creating Symbols for a given type and its value.
   * @param type The type of this symbol
   * @param value The value of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type, Object value) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn, value);
  }
  
  /**
   * Reports an error occured in a given line.
   * @param line The bad line
   * @param msg Additional information about the error
   */
  private void reportError(int line, String msg) {
      throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }

  public String current_lexeme(){
      int l = yyline+1;
      int c = yycolumn+1;
      return "line: " + l + ", column: " + c + ", with : '"+yytext()+"')";
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexical(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* discard bad characters */
          }
        case 101: break;
        case 2: 
          { return symbol(Sym.I_CONSTANT , new String(yytext()));
          }
        case 102: break;
        case 3: 
          { return symbol(Sym.IDENTIFIER, new String(yytext()));
          }
        case 103: break;
        case 4: 
          { return symbol(Sym.MINUSOP);
          }
        case 104: break;
        case 5: 
          { return symbol(Sym.QUESTION);
          }
        case 105: break;
        case 6: 
          { /* skip it */
          }
        case 106: break;
        case 7: 
          { return symbol(Sym.DIVOP);
          }
        case 107: break;
        case 8: 
          { return symbol(Sym.STAR);
          }
        case 108: break;
        case 9: 
          { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
          }
        case 109: break;
        case 10: 
          { return symbol(Sym.DOT);
          }
        case 110: break;
        case 11: 
          { return symbol(Sym.GT);
          }
        case 111: break;
        case 12: 
          { return symbol(Sym.ASSIGNMENT);
          }
        case 112: break;
        case 13: 
          { return symbol(Sym.LT);
          }
        case 113: break;
        case 14: 
          { return symbol(Sym.PLUSOP);
          }
        case 114: break;
        case 15: 
          { return symbol(Sym.MODOP);
          }
        case 115: break;
        case 16: 
          { return symbol(Sym.SINGLEAND);
          }
        case 116: break;
        case 17: 
          { return symbol(Sym.XOROP);
          }
        case 117: break;
        case 18: 
          { return symbol(Sym.SOROP);
          }
        case 118: break;
        case 19: 
          { return symbol(Sym.LOGNEGATION);
          }
        case 119: break;
        case 20: 
          { return symbol(Sym.BINNEG);
          }
        case 120: break;
        case 21: 
          { return symbol(Sym.SEMICOLON);
          }
        case 121: break;
        case 22: 
          { return symbol(Sym.LSQRBRK);
          }
        case 122: break;
        case 23: 
          { return symbol(Sym.COLON);
          }
        case 123: break;
        case 24: 
          { return symbol(Sym.RSQRBRK);
          }
        case 124: break;
        case 25: 
          { return symbol(Sym.COMMA);
          }
        case 125: break;
        case 26: 
          { return symbol(Sym.RBRK);
          }
        case 126: break;
        case 27: 
          { return symbol(Sym.LBRK);
          }
        case 127: break;
        case 28: 
          { return symbol(Sym.LPAR);
          }
        case 128: break;
        case 29: 
          { return symbol(Sym.RPAR);
          }
        case 129: break;
        case 30: 
          { return symbol(Sym.F_CONSTANT , new String(yytext()));
          }
        case 130: break;
        case 31: 
          { return symbol(Sym.DEC_OP, new String(yytext()));
          }
        case 131: break;
        case 32: 
          { return symbol(Sym.PTR_OP, new String(yytext()));
          }
        case 132: break;
        case 33: 
          { return symbol(Sym.SUB_ASSIGN, new String(yytext()));
          }
        case 133: break;
        case 34: 
          { /* whitespace separates tokens */
          }
        case 134: break;
        case 35: 
          { return symbol(Sym.DIV_ASSIGN,  new String(yytext()));
          }
        case 135: break;
        case 36: 
          { return symbol(Sym.MUL_ASSIGN, new String(yytext()));
          }
        case 136: break;
        case 37: 
          { return symbol(Sym.IF, new String(yytext()));
          }
        case 137: break;
        case 38: 
          { return symbol(Sym.DO, new String(yytext()));
          }
        case 138: break;
        case 39: 
          { return symbol(Sym.C_CONSTANT , new String(yytext()));
          }
        case 139: break;
        case 40: 
          { return symbol(Sym.STRING_LITERAL, new String(yytext()));
          }
        case 140: break;
        case 41: 
          { return symbol(Sym.RIGHT_OP, new String(yytext()));
          }
        case 141: break;
        case 42: 
          { return symbol(Sym.GE_OP, new String(yytext()));
          }
        case 142: break;
        case 43: 
          { return symbol(Sym.EQ_OP, new String(yytext()));
          }
        case 143: break;
        case 44: 
          { return symbol(Sym.LE_OP, new String(yytext()));
          }
        case 144: break;
        case 45: 
          { return symbol(Sym.LEFT_OP, new String(yytext()));
          }
        case 145: break;
        case 46: 
          { return symbol(Sym.ADD_ASSIGN, new String(yytext()));
          }
        case 146: break;
        case 47: 
          { return symbol(Sym.INC_OP, new String(yytext()));
          }
        case 147: break;
        case 48: 
          { return symbol(Sym.MOD_ASSIGN, new String(yytext()));
          }
        case 148: break;
        case 49: 
          { return symbol(Sym.AND_ASSIGN, new String(yytext()));
          }
        case 149: break;
        case 50: 
          { return symbol(Sym.AND_OP, new String(yytext()));
          }
        case 150: break;
        case 51: 
          { return symbol(Sym.XOR_ASSIGN, new String(yytext()));
          }
        case 151: break;
        case 52: 
          { return symbol(Sym.OR_ASSIGN, new String(yytext()));
          }
        case 152: break;
        case 53: 
          { return symbol(Sym.OR_OP, new String(yytext()));
          }
        case 153: break;
        case 54: 
          { return symbol(Sym.NE_OP, new String(yytext()));
          }
        case 154: break;
        case 55: 
          { return symbol(Sym.FOR, new String(yytext()));
          }
        case 155: break;
        case 56: 
          { return symbol(Sym.INT, new String(yytext()));
          }
        case 156: break;
        case 57: 
          { return symbol(Sym.ELLIPSIS);
          }
        case 157: break;
        case 58: 
          { return symbol(Sym.RIGHT_ASSIGN, new String(yytext()));
          }
        case 158: break;
        case 59: 
          { return symbol(Sym.LEFT_ASSIGN, new String(yytext()));
          }
        case 159: break;
        case 60: 
          { return symbol(Sym.LONG, new String(yytext()));
          }
        case 160: break;
        case 61: 
          { return symbol(Sym.VOID, new String(yytext()));
          }
        case 161: break;
        case 62: 
          { return symbol(Sym.AUTO, new String(yytext()));
          }
        case 162: break;
        case 63: 
          { return symbol(Sym.ELSE, new String(yytext()));
          }
        case 163: break;
        case 64: 
          { return symbol(Sym.ENUM, new String(yytext()));
          }
        case 164: break;
        case 65: 
          { return symbol(Sym.CASE, new String(yytext()));
          }
        case 165: break;
        case 66: 
          { return symbol(Sym.CHAR, new String(yytext()));
          }
        case 166: break;
        case 67: 
          { return symbol(Sym.GOTO, new String(yytext()));
          }
        case 167: break;
        case 68: 
          { return symbol(Sym.FLOAT, new String(yytext()));
          }
        case 168: break;
        case 69: 
          { return symbol(Sym.UNION, new String(yytext()));
          }
        case 169: break;
        case 70: 
          { return symbol(Sym.BREAK, new String(yytext()));
          }
        case 170: break;
        case 71: 
          { return symbol(Sym.CONST, new String(yytext()));
          }
        case 171: break;
        case 72: 
          { return symbol(Sym.SHORT, new String(yytext()));
          }
        case 172: break;
        case 73: 
          { return symbol(Sym.WHILE, new String(yytext()));
          }
        case 173: break;
        case 74: 
          { return symbol(Sym.BOOL);
          }
        case 174: break;
        case 75: 
          { return symbol(Sym.RETURN, new String(yytext()));
          }
        case 175: break;
        case 76: 
          { return symbol(Sym.EXTERN, new String(yytext()));
          }
        case 176: break;
        case 77: 
          { return symbol(Sym.STATIC, new String(yytext()));
          }
        case 177: break;
        case 78: 
          { return symbol(Sym.STRUCT, new String(yytext()));
          }
        case 178: break;
        case 79: 
          { return symbol(Sym.SIGNED, new String(yytext()));
          }
        case 179: break;
        case 80: 
          { return symbol(Sym.SIZEOF, new String(yytext()));
          }
        case 180: break;
        case 81: 
          { return symbol(Sym.SWITCH, new String(yytext()));
          }
        case 181: break;
        case 82: 
          { return symbol(Sym.INLINE, new String(yytext()));
          }
        case 182: break;
        case 83: 
          { return symbol(Sym.DOUBLE, new String(yytext()));
          }
        case 183: break;
        case 84: 
          { return symbol(Sym.TYPEDEF, new String(yytext()));
          }
        case 184: break;
        case 85: 
          { return symbol(Sym.DEFAULT, new String(yytext()));
          }
        case 185: break;
        case 86: 
          { return symbol(Sym.ATOMIC);
          }
        case 186: break;
        case 87: 
          { return symbol(Sym.UNSIGNED, new String(yytext()));
          }
        case 187: break;
        case 88: 
          { return symbol(Sym.VOLATILE, new String(yytext()));
          }
        case 188: break;
        case 89: 
          { return symbol(Sym.RESTRICT, new String(yytext()));
          }
        case 189: break;
        case 90: 
          { return symbol(Sym.REGISTER, new String(yytext()));
          }
        case 190: break;
        case 91: 
          { return symbol(Sym.CONTINUE, new String(yytext()));
          }
        case 191: break;
        case 92: 
          { return symbol(Sym.FUNC_NAME);
          }
        case 192: break;
        case 93: 
          { return symbol(Sym.ALIGNAS);
          }
        case 193: break;
        case 94: 
          { return symbol(Sym.ALIGNOF);
          }
        case 194: break;
        case 95: 
          { return symbol(Sym.COMPLEX);
          }
        case 195: break;
        case 96: 
          { return symbol(Sym.GENERIC);
          }
        case 196: break;
        case 97: 
          { return symbol(Sym.NORETURN);
          }
        case 197: break;
        case 98: 
          { return symbol(Sym.IMAGINARY);
          }
        case 198: break;
        case 99: 
          { return symbol(Sym.THREAD_LOCAL);
          }
        case 199: break;
        case 100: 
          { return symbol(Sym.STATIC_ASSERT);
          }
        case 200: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = Sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexical [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexical scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexical(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
