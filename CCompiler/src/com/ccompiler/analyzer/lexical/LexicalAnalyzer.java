/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package com.ccompiler.analyzer.lexical;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>../src/com/ccompiler/analyzer/lexical/C.flex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\32\1\113\1\114\1\31\22\0\1\25\1\65\1\112"+
    "\2\0\1\73\1\74\1\21\1\107\1\110\1\30\1\66\1\104\1\10"+
    "\1\111\1\27\1\1\7\3\1\2\1\2\1\103\1\77\1\72\1\71"+
    "\1\70\1\100\1\0\1\45\1\52\1\53\1\5\1\7\1\13\1\55"+
    "\1\33\1\56\2\33\1\15\1\33\1\60\1\33\1\11\2\33\1\34"+
    "\1\61\1\17\2\33\1\6\2\33\1\101\1\20\1\102\1\75\1\4"+
    "\1\0\1\36\1\23\1\40\1\44\1\42\1\12\1\46\1\62\1\37"+
    "\1\33\1\63\1\14\1\50\1\22\1\47\1\54\1\33\1\43\1\41"+
    "\1\35\1\16\1\26\1\64\1\24\1\57\1\51\1\106\1\76\1\105"+
    "\1\67\6\0\1\113\u1fa2\0\1\113\1\113\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\4\3\1\1"+
    "\1\3\1\5\1\3\1\6\1\7\1\5\12\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\1\1\35\2\0\1\2"+
    "\1\36\11\0\1\37\1\40\1\41\1\0\3\3\1\0"+
    "\1\3\2\0\1\3\1\42\2\3\1\5\1\0\1\43"+
    "\1\44\1\5\2\3\1\45\15\3\1\46\2\3\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\2\0\1\72\1\73\1\0\1\36\1\0"+
    "\1\36\13\0\1\3\1\74\3\3\1\73\1\0\3\3"+
    "\2\0\3\3\1\75\23\3\1\76\1\77\1\73\13\0"+
    "\1\100\1\3\1\101\4\3\1\102\1\0\1\3\1\103"+
    "\1\3\1\104\2\3\1\105\6\3\1\106\1\107\6\3"+
    "\1\110\1\3\4\0\1\111\5\0\1\112\1\113\1\3"+
    "\1\114\4\3\1\115\4\3\1\116\7\3\1\117\11\0"+
    "\3\3\1\120\1\3\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\3\3\1\130\4\0\1\131\5\0\2\3"+
    "\1\132\3\3\1\133\1\134\1\0\1\135\1\136\1\137"+
    "\1\140\3\0\1\141\1\142\1\143\1\144\1\145\2\0"+
    "\1\146\2\0\1\147\6\0\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb"+
    "\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\115\0\u0906"+
    "\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\115\0\115"+
    "\0\115\0\115\0\u0b21\0\115\0\115\0\115\0\115\0\115"+
    "\0\u0b6e\0\u0bbb\0\115\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c"+
    "\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4"+
    "\0\115\0\115\0\115\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u034f"+
    "\0\u1125\0\u1172\0\u11bf\0\u120c\0\u03e9\0\u1259\0\u12a6\0\u12f3"+
    "\0\u1340\0\115\0\115\0\115\0\u138d\0\u13da\0\u0181\0\u1427"+
    "\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f"+
    "\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\115"+
    "\0\115\0\115\0\u18f7\0\115\0\115\0\115\0\u1944\0\115"+
    "\0\115\0\115\0\115\0\115\0\115\0\115\0\115\0\115"+
    "\0\115\0\115\0\u0bbb\0\u1991\0\115\0\u19de\0\u1a2b\0\u1a78"+
    "\0\u1ac5\0\115\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93"+
    "\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u0181\0\u1eae"+
    "\0\u1efb\0\u1f48\0\115\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9"+
    "\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u0181\0\u224a\0\u2297\0\u22e4"+
    "\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c"+
    "\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4"+
    "\0\115\0\115\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982"+
    "\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\115\0\u2b9d"+
    "\0\u0181\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u0181\0\u2d1e\0\u2d6b"+
    "\0\u0181\0\u2db8\0\u0181\0\u2e05\0\u2e52\0\u0181\0\u2e9f\0\u2eec"+
    "\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u0181\0\u0181\0\u306d\0\u30ba"+
    "\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u0181\0\u323b\0\u3288\0\u32d5"+
    "\0\u3322\0\u336f\0\115\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0"+
    "\0\u0181\0\u0181\0\u353d\0\u0181\0\u358a\0\u35d7\0\u3624\0\u3671"+
    "\0\u0181\0\u36be\0\u370b\0\u3758\0\u37a5\0\u0181\0\u37f2\0\u383f"+
    "\0\u388c\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u0181\0\u3a0d\0\u3a5a"+
    "\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2"+
    "\0\u3d0f\0\u3d5c\0\u0181\0\u3da9\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u0181\0\u3df6\0\u3e43\0\u3e90\0\u0181\0\u3edd"+
    "\0\u3f2a\0\u3f77\0\u3fc4\0\115\0\u4011\0\u405e\0\u40ab\0\u40f8"+
    "\0\u4145\0\u4192\0\u41df\0\u0181\0\u422c\0\u4279\0\u42c6\0\u0181"+
    "\0\115\0\u4313\0\115\0\115\0\115\0\115\0\u4360\0\u43ad"+
    "\0\u43fa\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u4447\0\u4494"+
    "\0\115\0\u44e1\0\u452e\0\115\0\u457b\0\u45c8\0\u4615\0\u4662"+
    "\0\u46af\0\u46fc\0\115\0\115";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\3\6\1\7\1\6\1\10"+
    "\1\6\1\11\1\12\1\13\1\12\1\2\1\14\1\6"+
    "\1\15\1\6\1\16\1\17\1\20\1\21\1\22\1\16"+
    "\2\6\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\6\1\33\15\6\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\16\116\0\3\4\2\0"+
    "\1\64\1\65\4\0\4\66\4\0\1\64\15\0\1\65"+
    "\46\0\1\67\4\0\3\4\3\0\1\65\4\0\4\66"+
    "\22\0\1\65\46\0\1\67\7\0\1\70\27\0\1\71"+
    "\10\0\1\72\4\0\1\73\1\74\1\0\1\75\1\76"+
    "\1\0\1\77\1\100\34\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\4\0\32\6\40\0\1\101\57\0"+
    "\1\102\1\103\17\0\1\104\4\0\7\6\1\0\3\6"+
    "\1\105\3\6\2\0\3\6\1\0\1\6\4\0\14\6"+
    "\1\106\15\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\14\6\1\107\15\6\31\0\7\6"+
    "\1\0\7\6\1\0\1\110\3\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\1\0\1\110\1\111"+
    "\2\6\1\0\1\6\4\0\32\6\30\0\20\112\1\113"+
    "\1\0\10\112\1\0\62\112\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\4\0\10\6\1\114\21\6"+
    "\55\0\2\115\3\0\1\115\61\0\1\115\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\115\1\116\3\0\1\115"+
    "\14\6\1\117\15\6\27\0\1\115\27\0\1\120\1\121"+
    "\40\0\1\122\114\0\1\123\55\0\1\124\63\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\24\6"+
    "\1\125\5\6\31\0\7\6\1\0\5\6\1\126\1\6"+
    "\2\0\3\6\1\0\1\6\4\0\32\6\31\0\7\6"+
    "\1\0\1\6\1\127\5\6\2\0\1\130\2\6\1\0"+
    "\1\6\4\0\32\6\31\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\4\0\3\6\1\131\10\6\1\132"+
    "\12\6\1\133\2\6\31\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\4\0\2\6\1\134\1\6\1\135"+
    "\22\6\1\136\1\6\1\137\31\0\7\6\1\0\3\6"+
    "\1\140\3\6\2\0\1\141\1\6\1\142\1\0\1\6"+
    "\4\0\32\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\7\6\1\143\22\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\7\6"+
    "\1\144\4\6\1\145\15\6\31\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\4\0\14\6\1\146\15\6"+
    "\31\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\4\0\27\6\1\147\2\6\121\0\1\150\111\0\1\151"+
    "\2\0\1\152\113\0\1\153\1\154\114\0\1\155\114\0"+
    "\1\156\1\157\1\160\7\0\1\161\101\0\1\162\1\163"+
    "\114\0\1\164\2\0\1\165\111\0\1\166\114\0\1\167"+
    "\4\0\1\170\106\0\1\171\12\0\1\172\12\0\3\67"+
    "\111\0\20\173\1\174\71\173\1\175\2\173\1\0\3\176"+
    "\1\0\1\176\1\0\1\176\2\0\2\176\7\0\1\176"+
    "\12\0\1\176\1\0\1\176\1\0\1\176\1\0\2\176"+
    "\4\0\2\176\35\0\1\177\4\0\3\200\4\0\1\201"+
    "\55\0\1\201\42\0\4\66\76\0\3\67\3\0\1\65"+
    "\2\0\4\202\24\0\1\65\64\0\1\203\137\0\1\204"+
    "\73\0\1\205\20\0\1\206\126\0\1\207\114\0\1\210"+
    "\107\0\1\211\122\0\1\212\113\0\1\213\127\0\1\214"+
    "\143\0\1\215\4\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\14\6\1\216\15\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\10\6"+
    "\1\217\21\6\31\0\7\6\1\0\7\6\2\0\1\220"+
    "\2\6\1\0\1\6\4\0\32\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\4\6\1\221"+
    "\1\6\1\222\23\6\30\0\20\112\1\113\1\223\10\112"+
    "\1\0\62\112\1\0\1\112\1\0\1\112\6\0\1\112"+
    "\5\0\4\112\1\224\1\0\1\112\6\0\2\112\4\0"+
    "\1\112\34\0\1\112\11\0\1\112\3\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\7\6\1\225"+
    "\22\6\31\0\7\6\1\0\7\6\2\0\3\6\1\115"+
    "\1\116\3\0\1\115\32\6\27\0\1\115\1\0\7\6"+
    "\1\0\3\6\1\226\3\6\2\0\3\6\1\0\1\6"+
    "\4\0\4\6\1\227\25\6\30\0\31\120\1\22\1\124"+
    "\62\120\30\230\1\231\64\230\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\4\0\21\6\1\232\10\6"+
    "\31\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\4\0\2\6\1\233\27\6\31\0\7\6\1\0\3\6"+
    "\1\234\3\6\2\0\3\6\1\0\1\6\4\0\2\6"+
    "\1\235\27\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\6\6\1\236\23\6\31\0\7\6"+
    "\1\0\7\6\2\0\1\237\2\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\3\6\1\240\26\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\3\6\1\241"+
    "\4\6\1\242\21\6\31\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\4\0\13\6\1\243\2\6\1\244"+
    "\13\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\14\6\1\245\15\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\4\6\1\246"+
    "\25\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\6\6\1\247\23\6\31\0\7\6\1\0"+
    "\5\6\1\250\1\6\2\0\3\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\2\6\1\251\27\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\2\6\1\252"+
    "\3\6\1\253\4\6\1\254\16\6\31\0\7\6\1\0"+
    "\1\6\1\255\5\6\2\0\3\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\5\6\1\256\1\6\2\0"+
    "\3\6\1\0\1\6\4\0\32\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\2\6\1\257"+
    "\27\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\4\6\1\260\25\6\121\0\1\261\114\0"+
    "\1\262\23\0\31\173\2\0\60\173\3\0\3\176\1\0"+
    "\1\176\1\0\1\176\1\0\1\65\2\176\4\263\3\0"+
    "\1\176\12\0\1\176\1\0\1\176\1\0\1\176\1\0"+
    "\2\176\4\0\2\176\1\65\34\0\1\264\4\0\3\264"+
    "\1\0\1\264\1\0\1\264\2\0\2\264\7\0\1\264"+
    "\12\0\1\264\1\0\1\264\1\0\1\264\1\0\2\264"+
    "\4\0\2\264\42\0\3\200\6\0\4\202\100\0\3\200"+
    "\127\0\1\265\134\0\1\266\115\0\1\267\124\0\1\270"+
    "\114\0\1\271\115\0\1\272\66\0\1\273\130\0\1\274"+
    "\121\0\1\275\114\0\1\276\162\0\1\277\4\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\3\6"+
    "\1\300\26\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\13\6\1\301\16\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\14\6"+
    "\1\302\15\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\4\6\1\303\25\6\31\0\3\112"+
    "\1\0\1\112\1\0\1\112\2\0\2\112\7\0\1\112"+
    "\12\0\1\112\1\0\1\112\1\0\1\112\1\0\2\112"+
    "\4\0\2\112\42\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\3\6\1\304\26\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\3\6"+
    "\1\305\26\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\11\6\1\306\20\6\30\0\30\230"+
    "\1\307\64\230\27\0\1\124\1\231\65\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\7\6\1\310"+
    "\22\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\14\6\1\311\15\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\4\6\1\312"+
    "\25\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\7\6\1\313\22\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\2\6\1\314"+
    "\3\6\1\315\23\6\31\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\4\0\10\6\1\316\21\6\31\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\4\0"+
    "\2\6\1\317\27\6\31\0\7\6\1\0\5\6\1\320"+
    "\1\6\2\0\3\6\1\0\1\6\4\0\32\6\31\0"+
    "\7\6\1\0\7\6\2\0\1\321\2\6\1\0\1\6"+
    "\4\0\32\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\7\6\1\322\22\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\10\6"+
    "\1\323\21\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\2\6\1\324\27\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\7\6"+
    "\1\325\22\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\15\6\1\326\14\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\7\6"+
    "\1\327\22\6\31\0\7\6\1\0\5\6\1\330\1\6"+
    "\2\0\3\6\1\0\1\6\4\0\32\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\2\6"+
    "\1\331\27\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\4\6\1\332\25\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\3\6"+
    "\1\333\26\6\31\0\7\6\1\0\7\6\2\0\1\6"+
    "\1\334\1\6\1\0\1\6\4\0\32\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\14\6"+
    "\1\335\15\6\31\0\7\6\1\0\3\6\1\336\3\6"+
    "\2\0\3\6\1\0\1\6\4\0\32\6\44\0\4\263"+
    "\76\0\3\264\1\0\1\264\1\0\1\264\1\0\1\65"+
    "\2\264\7\0\1\264\12\0\1\264\1\0\1\264\1\0"+
    "\1\264\1\0\2\264\4\0\2\264\1\65\62\0\1\337"+
    "\127\0\1\340\125\0\1\341\116\0\1\342\60\0\1\343"+
    "\154\0\1\344\102\0\1\345\120\0\1\346\110\0\1\347"+
    "\114\0\1\350\53\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\2\6\1\351\27\6\31\0\7\6"+
    "\1\0\7\6\2\0\1\352\2\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\13\6\1\353\16\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\30\6\1\354"+
    "\1\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\2\6\1\355\27\6\30\0\27\230\1\124"+
    "\1\307\64\230\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\11\6\1\356\20\6\31\0\7\6"+
    "\1\0\7\6\2\0\1\357\2\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\4\6\1\360\25\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\2\6\1\361"+
    "\27\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\4\6\1\362\25\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\5\6\1\363"+
    "\24\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\7\6\1\364\22\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\14\6\1\365"+
    "\15\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\2\6\1\366\27\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\5\6\1\367"+
    "\24\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\10\6\1\370\21\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\10\6\1\371"+
    "\21\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\10\6\1\372\21\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\6\6\1\373"+
    "\23\6\31\0\7\6\1\0\5\6\1\374\1\6\2\0"+
    "\3\6\1\0\1\6\4\0\32\6\31\0\7\6\1\0"+
    "\3\6\1\375\3\6\2\0\3\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\7\6\1\376\22\6\70\0\1\377\113\0"+
    "\1\u0100\77\0\1\u0101\131\0\1\u0102\71\0\1\u0103\143\0"+
    "\1\u0104\110\0\1\u0105\112\0\1\u0106\115\0\1\u0107\57\0"+
    "\7\6\1\0\7\6\2\0\1\u0108\2\6\1\0\1\6"+
    "\4\0\32\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\4\6\1\u0109\25\6\31\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\4\0\7\6"+
    "\1\u010a\22\6\31\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\4\0\7\6\1\u010b\22\6\31\0\7\6"+
    "\1\0\7\6\2\0\1\u010c\2\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\5\6\1\u010d\24\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\2\6\1\u010e"+
    "\27\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\11\6\1\u010f\20\6\31\0\7\6\1\0"+
    "\1\6\1\u0110\5\6\2\0\3\6\1\0\1\6\4\0"+
    "\32\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\27\6\1\u0111\2\6\31\0\7\6\1\0"+
    "\7\6\2\0\1\u0112\2\6\1\0\1\6\4\0\32\6"+
    "\31\0\7\6\1\0\7\6\2\0\1\u0113\2\6\1\0"+
    "\1\6\4\0\32\6\31\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\4\0\4\6\1\u0114\25\6\31\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\4\0"+
    "\2\6\1\u0115\27\6\31\0\7\6\1\0\3\6\1\u0116"+
    "\3\6\2\0\3\6\1\0\1\6\4\0\32\6\31\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\4\0"+
    "\7\6\1\u0117\22\6\34\0\1\u0118\150\0\1\u0119\112\0"+
    "\1\u011a\10\0\1\u011b\105\0\1\u011c\116\0\1\u011d\111\0"+
    "\1\u011e\77\0\1\u011f\110\0\1\u0120\142\0\1\u0121\51\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\4\0"+
    "\7\6\1\u0122\22\6\31\0\7\6\1\0\3\6\1\u0123"+
    "\3\6\2\0\3\6\1\0\1\6\4\0\32\6\31\0"+
    "\7\6\1\0\1\6\1\u0124\5\6\2\0\3\6\1\0"+
    "\1\6\4\0\32\6\31\0\7\6\1\0\5\6\1\u0125"+
    "\1\6\2\0\3\6\1\0\1\6\4\0\32\6\31\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\4\0"+
    "\5\6\1\u0126\24\6\31\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\4\0\7\6\1\u0127\22\6\31\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\4\0"+
    "\2\6\1\u0128\27\6\34\0\1\u0129\114\0\1\u012a\151\0"+
    "\1\u012b\65\0\1\u012c\126\0\1\u012d\130\0\1\u012e\112\0"+
    "\1\u012f\121\0\1\u0130\55\0\1\u0131\111\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\11\6\1\u0132"+
    "\20\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\7\6\1\u0133\22\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\7\6\1\u0134"+
    "\22\6\31\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\4\0\2\6\1\u0135\27\6\31\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\4\0\10\6\1\u0136"+
    "\21\6\66\0\1\u0137\121\0\1\u0138\73\0\1\u0139\106\0"+
    "\1\u013a\141\0\1\u013b\132\0\1\u013c\104\0\1\u013d\106\0"+
    "\1\u013e\113\0\1\u013f\116\0\1\u0140\110\0\1\u0141\121\0"+
    "\1\u0142\65\0\1\u0143\135\0\1\u0144\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18249];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\7\1\4\11\1\1\5\11"+
    "\2\1\1\11\2\0\2\1\11\0\3\11\1\0\3\1"+
    "\1\0\1\1\2\0\5\1\1\0\3\11\23\1\3\11"+
    "\1\1\3\11\1\1\13\11\2\0\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\13\0\5\1\1\11\1\0\3\1"+
    "\2\0\27\1\2\11\1\1\13\0\1\11\7\1\1\0"+
    "\27\1\4\0\1\11\5\0\26\1\11\0\20\1\4\0"+
    "\1\11\5\0\7\1\1\11\1\0\4\11\3\0\5\1"+
    "\2\0\1\11\2\0\1\11\6\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public static String curLine;

  /**
   * Factory method for creating Symbols for a given type.
   * @param type The type of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn);
  }
  
  /**
   * Factory method for creating Symbols for a given type and its value.
   * @param type The type of this symbol
   * @param value The value of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type, Object value) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn, value);
  }
  
  /**
   * Reports an error occured in a given line.
   * @param line The bad line
   * @param msg Additional information about the error
   */
  private void reportError(int line, String msg) {
      throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }

  public String current_lexeme(){
      int l = yyline+1;
      int c = yycolumn+1;
      return "line: " + l + ", column: " + c + ", with : '"+yytext()+"')";
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* discard bad characters */
          }
        case 106: break;
        case 2: 
          { return symbol(sym.INTEGER, new String(yytext()));
          }
        case 107: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, new String(yytext()));
          }
        case 108: break;
        case 4: 
          { return symbol(sym.MINUSOP);
          }
        case 109: break;
        case 5: 
          { /* skip it */
          }
        case 110: break;
        case 6: 
          { return symbol(sym.DIVOP);
          }
        case 111: break;
        case 7: 
          { return symbol(sym.STAR);
          }
        case 112: break;
        case 8: 
          { return symbol(sym.LOGNEGATION);
          }
        case 113: break;
        case 9: 
          { return symbol(sym.PLUSOP);
          }
        case 114: break;
        case 10: 
          { return symbol(sym.BINNEG);
          }
        case 115: break;
        case 11: 
          { return symbol(sym.GT, new String(yytext()));
          }
        case 116: break;
        case 12: 
          { return symbol(sym.ASSIGNMENT, new String(yytext()));
          }
        case 117: break;
        case 13: 
          { return symbol(sym.LT, new String(yytext()));
          }
        case 118: break;
        case 14: 
          { return symbol(sym.MODOP);
          }
        case 119: break;
        case 15: 
          { return symbol(sym.SINGLEAND);
          }
        case 120: break;
        case 16: 
          { return symbol(sym.XOROP, new String(yytext()));
          }
        case 121: break;
        case 17: 
          { return symbol(sym.SOROP, new String(yytext()));
          }
        case 122: break;
        case 18: 
          { return symbol(sym.SEMICOLON, new String(yytext()));
          }
        case 123: break;
        case 19: 
          { return symbol(sym.QUESTION);
          }
        case 124: break;
        case 20: 
          { return symbol(sym.LSQRBRK);
          }
        case 125: break;
        case 21: 
          { return symbol(sym.RSQRBRK);
          }
        case 126: break;
        case 22: 
          { return symbol(sym.COLON);
          }
        case 127: break;
        case 23: 
          { return symbol(sym.COMMA);
          }
        case 128: break;
        case 24: 
          { return symbol(sym.RBRK, new String(yytext()));
          }
        case 129: break;
        case 25: 
          { return symbol(sym.LBRK, new String(yytext()));
          }
        case 130: break;
        case 26: 
          { return symbol(sym.LPAR, new String(yytext()));
          }
        case 131: break;
        case 27: 
          { return symbol(sym.RPAR, new String(yytext()));
          }
        case 132: break;
        case 28: 
          { return symbol(sym.DOT, new String(yytext()));
          }
        case 133: break;
        case 29: 
          { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
          }
        case 134: break;
        case 30: 
          { return F_CONSTANT;
          }
        case 135: break;
        case 31: 
          { return symbol(sym.AUTODECRM);
          }
        case 136: break;
        case 32: 
          { return symbol(sym.ARROW);
          }
        case 137: break;
        case 33: 
          { return symbol(sym.MINUSASSIGN, new String(yytext()));
          }
        case 138: break;
        case 34: 
          { /* whitespace separates tokens */
          }
        case 139: break;
        case 35: 
          { return symbol(sym.DIVASSIGN);
          }
        case 140: break;
        case 36: 
          { return symbol(sym.MULTASSIGN);
          }
        case 141: break;
        case 37: 
          { return symbol(sym.IF, new String(yytext()));
          }
        case 142: break;
        case 38: 
          { return symbol(sym.DO, new String(yytext()));
          }
        case 143: break;
        case 39: 
          { return symbol(sym.NEQOP, new String(yytext()));
          }
        case 144: break;
        case 40: 
          { return symbol(sym.AUTOINCRM);
          }
        case 145: break;
        case 41: 
          { return symbol(sym.PLUSASSIGN, new String(yytext()));
          }
        case 146: break;
        case 42: 
          { return symbol(sym.RSHIFT);
          }
        case 147: break;
        case 43: 
          { return symbol(sym.GTE, new String(yytext()));
          }
        case 148: break;
        case 44: 
          { return symbol(sym.EQOP, new String(yytext()));
          }
        case 149: break;
        case 45: 
          { return symbol(sym.LTE, new String(yytext()));
          }
        case 150: break;
        case 46: 
          { return symbol(sym.LSHIFT);
          }
        case 151: break;
        case 47: 
          { return '{';
          }
        case 152: break;
        case 48: 
          { return '[';
          }
        case 153: break;
        case 49: 
          { return '}';
          }
        case 154: break;
        case 50: 
          { return symbol(sym.MODASSIGN);
          }
        case 155: break;
        case 51: 
          { return symbol(sym.ANDASSIGN);
          }
        case 156: break;
        case 52: 
          { return symbol(sym.DOUBLEAND);
          }
        case 157: break;
        case 53: 
          { return symbol(sym.XORASSIGN);
          }
        case 158: break;
        case 54: 
          { return symbol(sym.ORASSIGN);
          }
        case 159: break;
        case 55: 
          { return symbol(sym.OROP, new String(yytext()));
          }
        case 160: break;
        case 56: 
          { return ']';
          }
        case 161: break;
        case 57: 
          { return symbol(sym.SEPPTR);
          }
        case 162: break;
        case 58: 
          { return symbol(sym.STRING_LITERAL, new String(yytext()));
          }
        case 163: break;
        case 59: 
          { return I_CONSTANT;
          }
        case 164: break;
        case 60: 
          { return symbol(sym.FOR, new String(yytext()));
          }
        case 165: break;
        case 61: 
          { return symbol(sym.INT, new String(yytext()));
          }
        case 166: break;
        case 62: 
          { return symbol(sym.RSHIFTASSIGN, new String(yytext()));
          }
        case 167: break;
        case 63: 
          { return symbol(sym.LSHIFTASSIGN, new String(yytext()));
          }
        case 168: break;
        case 64: 
          { return symbol(sym.DOTS);
          }
        case 169: break;
        case 65: 
          { return symbol(sym.LONG, new String(yytext()));
          }
        case 170: break;
        case 66: 
          { return symbol(sym.VOID, new String(yytext()));
          }
        case 171: break;
        case 67: 
          { return symbol(sym.AUTO, new String(yytext()));
          }
        case 172: break;
        case 68: 
          { return symbol(sym.CASE, new String(yytext()));
          }
        case 173: break;
        case 69: 
          { return symbol(sym.CHAR, new String(yytext()));
          }
        case 174: break;
        case 70: 
          { return symbol(sym.ELSE, new String(yytext()));
          }
        case 175: break;
        case 71: 
          { return symbol(sym.ENUM, new String(yytext()));
          }
        case 176: break;
        case 72: 
          { return symbol(sym.GOTO, new String(yytext()));
          }
        case 177: break;
        case 73: 
          { return symbol(sym.BOOL);
          }
        case 178: break;
        case 74: 
          { return symbol(sym.FLOAT, new String(yytext()));
          }
        case 179: break;
        case 75: 
          { return symbol(sym.UNION);
          }
        case 180: break;
        case 76: 
          { return symbol(sym.BREAK, new String(yytext()));
          }
        case 181: break;
        case 77: 
          { return symbol(sym.CONST);
          }
        case 182: break;
        case 78: 
          { return symbol(sym.SHORT, new String(yytext()));
          }
        case 183: break;
        case 79: 
          { return symbol(sym.WHILE, new String(yytext()));
          }
        case 184: break;
        case 80: 
          { return symbol(sym.INLINE, new String(yytext()));
          }
        case 185: break;
        case 81: 
          { return symbol(sym.STATIC, new String(yytext()));
          }
        case 186: break;
        case 82: 
          { return symbol(sym.STRUCT);
          }
        case 187: break;
        case 83: 
          { return symbol(sym.SIGNED, new String(yytext()));
          }
        case 188: break;
        case 84: 
          { return symbol(sym.SIZEOF);
          }
        case 189: break;
        case 85: 
          { return symbol(sym.SWITCH, new String(yytext()));
          }
        case 190: break;
        case 86: 
          { return symbol(sym.EXTERN);
          }
        case 191: break;
        case 87: 
          { return symbol(sym.RETURN, new String(yytext()));
          }
        case 192: break;
        case 88: 
          { return symbol(sym.DOUBLE, new String(yytext()));
          }
        case 193: break;
        case 89: 
          { return symbol(sym.ATOMIC);
          }
        case 194: break;
        case 90: 
          { return symbol(sym.TYPEDEF, new String(yytext()));
          }
        case 195: break;
        case 91: 
          { return symbol(sym.DEFAULT);
          }
        case 196: break;
        case 92: 
          { return symbol(FUNC_NAME);
          }
        case 197: break;
        case 93: 
          { return symbol(sym.ALIGNAS);
          }
        case 198: break;
        case 94: 
          { return symbol(sym.ALIGNOF);
          }
        case 199: break;
        case 95: 
          { return symbol(COMPLEX);
          }
        case 200: break;
        case 96: 
          { return symbol(GENERIC);
          }
        case 201: break;
        case 97: 
          { return symbol(sym.UNSIGNED, new String(yytext()));
          }
        case 202: break;
        case 98: 
          { return symbol(sym.VOLATILE);
          }
        case 203: break;
        case 99: 
          { return symbol(sym.CONTINUE, new String(yytext()));
          }
        case 204: break;
        case 100: 
          { return symbol(sym.RESTRICT, new String(yytext()));
          }
        case 205: break;
        case 101: 
          { return symbol(sym.REGISTER, new String(yytext()));
          }
        case 206: break;
        case 102: 
          { return symbol(NORETURN);
          }
        case 207: break;
        case 103: 
          { return symbol(IMAGINARY);
          }
        case 208: break;
        case 104: 
          { return symbol(THREAD_LOCAL);
          }
        case 209: break;
        case 105: 
          { return symbol(sym.STATIC_ASSERT);
          }
        case 210: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
